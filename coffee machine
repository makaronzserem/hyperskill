class StatusMachine:
    
    def __init__(self):  #stałe wartości
        self.water = 400
        self.milk = 540
        self.beans = 120
        self.cups = 9
        self.money = 550
        self.state = "start"
        
        print("Write action (buy, fill, take, remaining, exit):")
        
        
    def interface(self, entry):  #menu 
            
        
        if entry == "buy":
            self.print_coffee()
            self.state = "buy"
            return
           
        if self.state == "buy":
            
            if entry == "back":
                self.buy(entry)
            else:
                self.buy(entry)
                
            self.state = "start"
            print("Write action (buy, fill, take, remaining, exit):")
            # funkcja wywolujaca menu
            
        if entry == "take":
            self.take()
            self.state = "start"
            print("Write action (buy, fill, take, remaining, exit):")
            
        if entry == "fill":
            self.state = "fill_water"
            print("Write how many ml of water you want to add:")
            return
            
        if self.state == "fill_water":
            self.fill_water(entry)
            self.state = "fill_milk"
            print("Write how many ml of milk you want to add:")
            return
        
        if self.state == "fill_milk":
            self.fill_milk(entry)
            self.state = "fill_beans"
            print("Write how many grams of coffee beans you want to add:")
            return
        
        if self.state == "fill_beans":
            self.fill_beans(entry)
            self.state = "fill_cups"
            print("Write how many disposable cups of coffee do you want to add:")
            return
        
        if self.state == "fill_cups":
            self.fill_cups(entry)
            self.state = "start"
            print("Write action (buy, fill, take, remaining, exit):")
            return
            
        if entry == "remaining":
            self.print_actual_status()
            self.state = "start"
            print("Write action (buy, fill, take, remaining, exit):")
            return
            
        if entry == "exit":
            self.state = "exit"
            

    def print_actual_status(self):
        print("The coffee machine has:")
        print(self.water, "of water")
        print(self.milk, "of milk")
        print(self.beans, "of coffee beans")
        print(self.cups, "of disposable cups")
        print("$", self.money, sep="", end=" ")
        print("of money")
        print("")
        
    def print_coffee(self):
        print("What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino, back - to main menu:")

    def change_milk(self, x):
        self.milk = self.milk - x
    def change_water(self, x):
        self.water = self.water - x
    def change_beans(self, x):
        self.beans =  self. beans - x
    def change_cups(self, x):
        self.cups = self.cups - x
    def change_money(self, x):
        self.money = self.money + x

    def take(self):
        print("I gave you", end=" ")
        print("$", self.money, sep="")
        self.money = 0
        
    def fill_water(self, added_water):  
        self.water += int(added_water)
        
    def fill_milk(self, added_milk):
        self.milk += int(added_milk)
        
    def fill_beans(self, added_beans):
        self.beans += int(added_beans)
        
    def fill_cups(self, added_cups):
        self.cups += int(added_cups)

    def buy(self, coffee_type):
    
        if coffee_type == "back":
            return
        
        water_ok = self.check_water(coffee_type)
        milk_ok = self.check_milk(coffee_type)
        beans_ok = self.check_beans(coffee_type)
        cups_ok = self.check_cups()
        
        
        if water_ok and milk_ok and beans_ok and cups_ok:
            print("I have enough resources, making you a coffee!")
            if coffee_type == "1":
                self.change_water(250)
                self.change_beans(16)
                self.change_money(4)
                self.change_cups(1)
            if coffee_type == "2":
                self.change_water(350)
                self.change_milk(75)
                self.change_beans(20)
                self.change_money(7)
                self.change_cups(1)
            if coffee_type == "3":
                self.change_water(200)
                self.change_milk(100)
                self.change_beans(12)
                self.change_money(6)
                self.change_cups(1)
        else:
            if not water_ok:
                print("Sorry, not enough water")
            if not milk_ok:
                print("Sorry, not enough milk")
            if not beans_ok:
                print("Sorry, not enough coffee")
            if not cups_ok:
                print("Sorry, not enough cups")

            
    def check_water(self, ctype):
        if ctype == "1":
            if self.water < 250:
                return False
            else:
                return True
        if ctype == "2":
            if self.water < 350:
                return False
            else:
                return True
        if ctype == "3":
            if self.water < 200:
                return False
            else:
                return True
                
    def check_beans(self, ctype):
        if ctype == "1":
            if self.beans < 16:
                return False
            else:
                return True
        if ctype == "2":
            if self.beans < 20:
                return False
            else:
                return True
        if ctype == "3":
            if self.beans < 12:
                return False
            else:
                return True
                
    def check_milk(self, ctype):
        if ctype == "1":
            return True
        if ctype == "2":
            if self.milk < 75:
                return False
            else:
                return True
        if ctype == "3":
            if self.milk < 100:
                return False
            else:
                return True
                
    def check_cups(self):
        if self.cups < 1:
            return False
        else:
            return True



step = StatusMachine()

while step.state != "exit":
    user_choice = input()
    step.interface(user_choice)
    
    

